detect-secrets:
  stage: detect-secrets
  image:
    name: registry.ftech.ai/public/is-chart/detect-secrets:latest
  script:
    - rm -rf .git/
    - python /app/detect-secrets.py
  tags: [devsecops]
  allow_failure: true
  only:
    - devsecops
    - develop
    - main

dependency-check:
  stage: dependency-check
  image:
    name: aquasec/trivy
    entrypoint: [""]
  script:
    - trivy filesystem --format cyclonedx --output ./result.json --security-checks vuln --ignore-unfixed -s HIGH,CRITICAL .
    - cat ./result.json > $RESULT
  tags: [devsecops]
  artifacts:
    paths:
      - $RESULT
  allow_failure: true
  only:
    - devsecops
    - develop
    - main

upload-bom:
  stage: upload-bom
  image: 
    name: curlimages/curl
    entrypoint: [""]
  script: 
    - curl -X "POST" "https://dependency-track.dev.ftech.ai/api/v1/bom" -H "Content-Type:multipart/form-data" -H "X-Api-Key:$DEPENDENCY_TRACK_KEY" -F "autoCreate=true" -F "projectName=$CI_PROJECT_NAME" -F "description=abcd" -F "bom=@result1.json"
  tags: [devsecops]
  allow_failure: true
  only:
    - devsecops
    - develop
    - main

sonarqube-check:
  stage: sonarqube-check
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  tags: [devsecops]
  allow_failure: true
  only:
    - devsecops # or the name of your main branch
    - develop
    - main

